Live Coding Session
===================

1. Applying styles to a document

- We can apply inline styles by using the "style" attribute.

<header style="background: gray;"> 

- We can separate the attributes from the structure of the document
using the "style" tag.

<style>

header {
    background : gray;
}

</style>

- We can also separate the style definition from the html by using a stylesheet
document. This allows us to reuse the styles in different documents.

<link rel="stylesheet" href="styles.css">


2. Selectors 

Selectors can be applied to tags, "classes" and ids

p {
    color: blue;
}

.quote {
    color: black;
}

#summary {
    color: gray;
}



3. Colors and background
Have a look at this online color generator: http://www.colorschemer.com/online.html
and try the "color" property to set the text color, and "background" to set an element background color;

color : rgb(184, 138, 0);
color : #B88A00;       
background: #E0E0E0;
    
    
4. Text

Let's explore the following text properties.

    font-family: arial, helvetica, serif;
    font-size: 14px;
    font-weight: bold;
    font-style: italic;
    text-decoration: none;
    text-transform: uppercase;
    
    letter-spacing: 0.5em;
    word-spacing: 0.5em;
    line-height: 1.5;
    text-align: justify;        

- Playing with web fonts: Checkout some of the fonts at: https://www.google.com/fonts

@import url(http://fonts.googleapis.com/css?family=Press+Start+2P);

h1 {
    font-family: "Press Start 2P";
}


5. The Box Model

Every tag in html defines a "box" with interesting properties that can be modified via CSS. These properties are: 
width, height, padding, border and margin. 

- Let's open box.html


    <div class="container">          
        <div class="box">
          Box 1
        </div>                  
    </div>  

- let's set some basic formating:

.container {
    background: #efefef;
}

.box {
    background: #395cba;
    color : white;  
}

- lets change the width and height of the box
  width: 200px;
  height: 200px;

- lets add some border to the box and container
  border: 2px solid yellow;
  
  border: 1px dotted black;
  
- lets add some spacing between the border and the text by adding some padding
  padding: 10px;

- lets set some margin in reference to the container
  margin: 10px;

    
6. Positioning 

The position allows to set where any "block" will be placed in a document. The position can be:
- static : default, following the html flow
- relative: relative to its current position
- absolute: absolute to the immediate non "static" element
- fixed: fixed relative to the browser

Setting the position of box to relative, will allow us to move the it with top, bottom, left, and right, 
relative to its current position. 

  position: relative;
  top: 20px;
  left: 20px;

Absolute instead will allow us to set the abolute position with respect to a reference container. This reference will be
the immediate non "static" (position: static) element in the document. Setting the following on box:

  position: absolute;
  bottom: 0px;
  right: 0px;

will make it stick to the document. This is because "container" has position: static as default property. Lets change it for
  position: relative
  
Finally, by setting a fixed position on .box will make it stick to the browser. 
  position: fixed;
  bottom: 0px;
  right: 0px;
 

7. Displaying elements

We can control how elements are displaying in the HTML flow using "display" types. There are a few fundamental types:
"block", "inline" and "none".

-Let's open display.html

-Let's give some basic formating

nav {
  background: #efefef;
}

ul {
  margin: 0px;
  padding: 0px;
}

li {  
  background: #0e8af5;
  display: block;
}

- We can assign the width and height as we have seen in the previous steps
  width: 200px;
  border: 1px solid black;
  
- We have some basic formating. The manu is vertical though. To make them appear "inline"
(one next to the other), we should change the display property.

  display: block;   // inline
  
- The inline display makes the box adapt to the text, preventing us to apply with, height or with.   
  float: left;
  
  
- There are two options, we can combine the properties of block elements with inline in block-inline  
  display: inline-block;
  
- The alternative is to use floating elements. That will make elements to wrap around. 
  float: left;


- Now let's rewrite the CSS to make more precise references. 



===== IF there is time ======


8- Let's do an exercise together: 

Analyse the following structure

        <section>
            <h1>Choose one option:</h1>
            
            <ul class="pins">
                <li>
                    <img src="http://icons.iconarchive.com/icons/iconka/meow/256/cat-walk-icon.png">
                    <a href="#">Funny cat</a>
                    <p> Yet another internet cat. </p>
                </li> 
                <li>
                    <img src="http://icons.iconarchive.com/icons/iconka/meow/256/cat-walk-icon.png">
                    <a href="#">Soft kitty</a>
                    <p> Yet another internet cat. </p>
                </li>   
                <li>
                    <img src="http://icons.iconarchive.com/icons/iconka/meow/256/cat-walk-icon.png">
                    <a href="#">Warm kitty</a>
                    <p> Yet another internet cat. </p>
                </li>                   

            </ul> 
        </section>     

/* Levels */

/* Pins */
.pins {
    background: #D6F5FF;
}

.pins li {
    list-style: none;
}

.pins h1 {
    font-size: 14px;
}

.pins li.selected {
    background: #efefef;
}



- Lets add the following styles to our pin class, and inspect the box model using the browser's 
inspection tool.

.pins {
    padding: 0px;
}

.pins li {
    list-style: none;
    
    border: 1px solid #3D3D3D;
    padding: 10px;
    margin : 10px;
    width: 200px;     
    
}

Each box defines a context. All properties set on a box, depend on the parent box.

.pins li img {
    width: 100%;
}

- Display
There are two types of main types of "display" for all the elements (boxes): inline and block display. Compare the following code to the previous structure:

<ul>...</ul>

<a href="somelink.html">Soft kitty</a>
<a href="somelink.html">Warm kitty</a>

The default behaviour can be changes by using the "display" property.

.level {
    display: inline;
}

Noticed that the previous example breaks the structure of the element. This is because the .level element contains "block" elements inside.  Now try the following:

display: inline-block;    



8. Giving life to a webapp
- pseudo classes

.pins li:hover {
    background: #efefef;
}

.pins li:active {
    background: #3D3D3D;
}


- transitions and transformations

.pins li:active img {
    -webkit-transform: rotate(-10deg) scale(1.5);   
    -webkit-transition: .5s;
}




